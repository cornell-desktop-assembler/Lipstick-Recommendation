{"version":3,"sources":["../../../DesktopAssembler-backend_merge/frontend/src/title.png","../../../DesktopAssembler-backend_merge/frontend/src/components/Dropdowns.js","../../../DesktopAssembler-backend_merge/frontend/src/components/CharacteristicInput.js","../../../DesktopAssembler-backend_merge/frontend/src/components/BrandInput.js","../../../DesktopAssembler-backend_merge/frontend/src/components/IndexContainer.js","../../../DesktopAssembler-backend_merge/frontend/src/App.js","../../../DesktopAssembler-backend_merge/frontend/src/serviceWorker.js","../../../DesktopAssembler-backend_merge/frontend/src/index.js"],"names":["module","exports","__webpack_require__","p","Dropdowns","_this","this","react_default","a","createElement","class","ButtonGroup_default","size","justified","DropdownButton_default","block","as","ButtonGroup","variant","title","props","skinTone","id","Dropdown_default","Item","eventKey","onSelect","onChangeSkinTone","Divider","options","map","option","skinType","onChangeSkinType","eyeColor","onChangeEyeColor","Component","CharacteristicInput","Form_default","Group","controlId","Control","type","value","data","onChange","placeholder","Text","className","BrandInput","IndexContainer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","characteristicInput","brandInput","submitDisabled","submitColor","handleChangeCharacteristicInput","bind","assertThisInitialized","handleChangeBrandInput","handleChangeSkinTone","handleChangeSkinType","handleChangeEyeColor","onClick","handleSubmit","viable","setState","event","target","checkViability","characteristicInputs","replace","split","brandInputs","alert","Container_default","Row_default","Col_default","components_CharacteristicInput","components_BrandInput","components_Dropdowns","style","marginTop","Button_default","disabled","App","rel","href","integrity","crossOrigin","src","require","components_IndexContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8b7d71a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/title.28f4ada6.png\";","import React, { Component } from 'react';\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nclass Dropdowns extends Component {\n\n    render() {\n        return (\n            <div class=\"dropdown-group\">\n                <ButtonGroup size=\"lg\" justified>\n                    <DropdownButton\n                        block\n                        as={ButtonGroup}\n                        variant={'primary'}\n                        title={\"Skin Tone: \" + this.props.skinTone}\n                        id=\"bg-nested-dropdown\">\n                        <Dropdown.Item eventKey=\"Not Selected\" onSelect={this.props.onChangeSkinTone}>Not Selected</Dropdown.Item>\n                        <Dropdown.Divider />\n                        {this.props.options[0].map(option => (\n                            <Dropdown.Item eventKey={option} onSelect={this.props.onChangeSkinTone}>{option}</Dropdown.Item>\n                        ))}\n                    </DropdownButton>\n                    <DropdownButton\n                        block\n                        as={ButtonGroup}\n                        variant={'warning'}\n                        title={\"Skin Type: \" + this.props.skinType}\n                        id=\"bg-nested-dropdown\">\n                        <Dropdown.Item eventKey=\"Not Selected\" onSelect={this.props.onChangeSkinType}>Not Selected</Dropdown.Item>\n                        <Dropdown.Divider />\n                        {this.props.options[1].map(option => (\n                            <Dropdown.Item eventKey={option} onSelect={this.props.onChangeSkinType}>{option}</Dropdown.Item>\n                        ))}\n                    </DropdownButton>\n                    <DropdownButton\n                        as={ButtonGroup}\n                        variant={'danger'}\n                        title={\"Eye Color: \" + this.props.eyeColor}\n                        id=\"bg-nested-dropdown\">\n                        <Dropdown.Item eventKey=\"Not Selected\" onSelect={this.props.onChangeEyeColor}>Not Selected</Dropdown.Item>\n                        <Dropdown.Divider />\n                        {this.props.options[2].map(option => (\n                            <Dropdown.Item eventKey={option} onSelect={this.props.onChangeEyeColor}>{option}</Dropdown.Item>\n                        ))}\n                    </DropdownButton>\n                </ButtonGroup>\n            </div>\n        );\n    }\n}\n\nexport default Dropdowns;","import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\n\nclass CharacteristicInput extends Component {\n\n    render() {\n        return (\n            <div>\n                <Form>\n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Control type=\"string\"\n                                      value={this.props.data}\n                                      onChange={this.props.onChange}\n                                      placeholder=\"Keyword(s)\" />\n                        <Form.Text className=\"text\" size=\"lg\">\n                            You can enter anything on your mind from product characteristics (like \"moist\") to use cases (like \"interview\")\n                        </Form.Text>\n                    </Form.Group>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default CharacteristicInput","import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\n\nclass BrandInput extends Component {\n\n    render() {\n        return (\n            <div>\n                <Form>\n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Control type=\"string\"\n                                      value={this.props.data}\n                                      onChange={this.props.onChange}\n                                      placeholder=\"Brand(s)\" />\n                        <Form.Text className=\"text\" size=\"lg\">\n                            Only enter this field if you have a strong preference\n                        </Form.Text>\n                    </Form.Group>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default BrandInput","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Dropdowns from './Dropdowns.js'\nimport CharacteristicInput from './CharacteristicInput.js'\nimport BrandInput from './BrandInput.js'\nimport '../App.css'\nimport Button from \"react-bootstrap/Button\";\n\nclass IndexContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            characteristicInput: '',\n            brandInput: '',\n            skinTone: 'Not Selected',\n            skinType: 'Not Selected',\n            eyeColor: 'Not Selected',\n            submitDisabled: true,\n            submitColor: 'light'\n        };\n        this.handleChangeCharacteristicInput = this.handleChangeCharacteristicInput.bind(this);\n        this.handleChangeBrandInput = this.handleChangeBrandInput.bind(this);\n        this.handleChangeSkinTone = this.handleChangeSkinTone.bind(this);\n        this.handleChangeSkinType = this.handleChangeSkinType.bind(this);\n        this.handleChangeEyeColor = this.handleChangeEyeColor.bind(this);\n        this.onClick = this.handleSubmit.bind(this);\n\n        this.options = [['Dark', 'Light'],\n            ['Dry', 'Moderate', 'Oily'],\n            ['Black', 'Brown', 'Green', 'Blue', 'Grey', 'White']]\n    }\n\n    checkViability() {\n        let viable = !(this.state.characteristicInput === '' &&\n            this.state.brandInput === '' &&\n            this.state.skinTone === 'Not Selected' &&\n            this.state.skinType === 'Not Selected' &&\n            this.state.eyeColor === 'Not Selected');\n        this.setState({\n            submitDisabled: !viable,\n            submitColor: viable? 'success' : 'light'\n        });\n    }\n\n    handleChangeCharacteristicInput(event) {\n        this.setState({\n            characteristicInput: event.target.value\n        }, this.checkViability);\n    }\n\n    handleChangeBrandInput(event) {\n        this.setState({\n            brandInput: event.target.value\n        }, this.checkViability);\n    }\n\n    handleChangeSkinTone(eventKey) {\n        this.setState({\n            skinTone: eventKey\n        }, this.checkViability);\n    }\n\n    handleChangeSkinType(eventKey) {\n        this.setState({\n            skinType: eventKey\n        }, this.checkViability);\n    }\n\n    handleChangeEyeColor(eventKey) {\n        this.setState({\n            eyeColor: eventKey\n        }, this.checkViability);\n    }\n\n    handleSubmit() {\n        let characteristicInputs = this.state.characteristicInput.replace(', ', ' ')\n            .replace(',', ' ')\n            .split(' ');\n        let brandInputs = this.state.brandInput.replace(', ', ' ')\n            .replace(',', ' ')\n            .split(' ');\n\n        //TODO: connect to backend\n        alert('Your query is: \\n' +\n              'keywords: ' + characteristicInputs + '\\n' +\n              'brand: ' + brandInputs + '\\n' +\n              'skin tone: ' + this.state.skinTone + '\\n' +\n              'skin type: ' + this.state.skinType + '\\n' +\n              'eye color: ' + this.state.eyeColor)\n    }\n\n    render() {\n        return (\n            <Container >\n                <Row>\n                    <Col>\n                        <CharacteristicInput\n                            data={this.state.characteristicInput}\n                            onChange={this.handleChangeCharacteristicInput}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <BrandInput\n                            data={this.state.brandInput}\n                            onChange={this.handleChangeBrandInput}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Dropdowns\n                            options={this.options}\n                            skinTone={this.state.skinTone}\n                            skinType={this.state.skinType}\n                            eyeColor={this.state.eyeColor}\n                            onChangeSkinTone={this.handleChangeSkinTone}\n                            onChangeSkinType={this.handleChangeSkinType}\n                            onChangeEyeColor={this.handleChangeEyeColor}\n                        />\n                    </Col>\n                </Row>\n                <div style={{marginTop: 4 + 'em'}}>\n                    <Row>\n                        <Col>\n                            <Button\n                                disabled={this.state.submitDisabled}\n                                variant={this.state.submitColor}\n                                size=\"lg\"\n                                onClick={this.onClick}\n                            >Find your match!</Button>\n                        </Col>\n                    </Row>\n                </div>\n            </Container>\n        );\n    }\n}\n\nexport default IndexContainer;","import React, { Component } from 'react';\nimport IndexContainer from './components/IndexContainer.js'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <link\n              rel=\"stylesheet\"\n              href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n              integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n              crossOrigin=\"anonymous\"\n          />\n        </header>\n        <body>\n          <div className=\"lip-background\">\n              <div className=\"lip-container\">\n                  {/*<img src=\"./title.png\" alt=\"Forest\" width=\"170\" height=\"100\"/>*/}\n                  <img src={require('./title.png')} />\n                  <IndexContainer/>\n              </div>\n          </div>\n        </body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}